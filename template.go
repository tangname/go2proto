package main

import (
	"log"
	"os"
	"path"
	"sort"
	"text/template"
)

var protoTemplate = `// Code generated by go2proto. DO NOT EDIT.

syntax = "proto3";

package pb;

{{- if .ServiceName }}
service {{.ServiceName}} {
    {{- range .ServiceFunctions }}
    {{.Comment}} {{ $ParamTypes:=.ParamTypes }} {{ $ResultTypes:=.ResultTypes }}
    rpc {{.Name}} ({{- range $i,$v:= $ParamTypes}}{{$v}}{{ if notLastIndex $ParamTypes $i}},{{ end}}{{- end}}) returns({{- range $i,$v:= $ResultTypes}}{{$v}}{{ if notLastIndex $ResultTypes $i}},{{ end}}{{- end}}) {}
    {{- end}}
}
{{end -}}

/* PERSISENT OBJECT(PO) */
{{range .Poes}}
message {{.Name}} {
    {{- range .MessageFields}}
    {{.FieldType}} {{.FieldName}} = {{.Index}}; {{.Comment}}
    {{- end}}
}
{{end -}}

/* REQUEST Models Of DATA-TRANSFER-OBJECT(DTO) */
{{range .Resps}}
message {{.Name}} {
    {{- range .MessageFields}}
    {{.FieldType}} {{.FieldName}} = {{.Index}}; {{.Comment}}
    {{- end}}
}
{{end -}}

/* RESPONSE Models Of DATA-TRANSFER-OBJECT(DTO) */
{{range .Resps}}
message {{.Name}} {
    {{- range .MessageFields}}
    {{.FieldType}} {{.FieldName}} = {{.Index}}; {{.Comment}}
    {{- end}}
}
{{end -}}

/* ELSE Models Of DATA-TRANSFER-OBJECT(DTO) */
{{range .Else}}
message {{.Name}} {
    {{- range .MessageFields}}
    {{.FieldType}} {{.FieldName}} = {{.Index}}; {{.Comment}}
    {{- end}}
}
{{end -}}
`

type ByIndex []*Message

func (a ByIndex) Len() int           { return len(a) }
func (a ByIndex) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a ByIndex) Less(i, j int) bool { return a[i].Index < a[j].Index }

/*
 保存 proto 文件模板
*/
func saveToFile(service *Service, protoPath string) {
	// 将Service转换未saveModel
	saveModel := SaveModel{}
	saveModel.ServiceName = service.Name
	saveModel.ServiceFunctions = service.ServiceFunctions

	// 将消息分组排序;
	messages := make([]*Message, 0, len(service.RootDto.Messages))
	for _, message := range service.RootDto.Messages {
		messages = append(messages, message)
	}
	sort.Sort(ByIndex(messages))
	for _, message := range messages {
		switch message.Type {
		case POES:
			saveModel.Poes = append(saveModel.Poes, message)
		case REQ:
			saveModel.Poes = append(saveModel.Reqs, message)
		case RESP:
			saveModel.Resps = append(saveModel.Resps, message)
		case ELSE:
			saveModel.Else = append(saveModel.Else, message)
		}
	}

	t, err := template.New("protoTemplate").
		Funcs(template.FuncMap{
			"notLastIndex": func(source []string, i int) bool {
				if i >= (len(source) - 1) {
					return false
				} else {
					return true
				}
			},
		}).
		Parse(protoTemplate)

	if err != nil {
		log.Panic(err)
	}
	os.MkdirAll(path.Dir(protoPath), 0755)
	os.Remove(protoPath)
	f, err := os.OpenFile(protoPath, os.O_CREATE|os.O_RDWR, 0755)
	if err != nil {
		log.Panic(err)
	}

	err = t.Execute(f, saveModel)
	if err != nil {
		log.Panic(err)
	}
}
